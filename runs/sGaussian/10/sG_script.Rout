
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Simulator sG
> 
> library(CurveRegistration)
> library(protoABC)
> library(parallel)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> # Settings ----------------------
> 
> run_number = 1
> 
> set.seed(1)
> 
> Time <- seq(0, 200, by = 0.5)
> alpha = seq(20, 280, by = 20)
> theta = c(1, 0.7, 0.01)
> 
> alpha_norm   <- alpha[seq(1,length(alpha), by = 2)]
> alpha_cauchy <- alpha[seq(2,length(alpha), by = 2)]
> 
> n_runs = 4000
> pacc_final = 0.005
> 
> var_mat <- diag(c(9, 0.01^2))
> 
> y <- simulator_sGaussian(Time, param = theta, alpha_norm = alpha_norm, alpha_cauchy = alpha_cauchy)
> y_kmmd <- EasyMMD::kmmd(y, var = var_mat)
> x <- simulator_sGaussian(Time, param = theta, alpha_norm = alpha_norm, alpha_cauchy = alpha_cauchy)
> 
> distance_fun(y, x, registration = TRUE, distance = "MMD", y_kmmd = y_kmmd, var = var_mat, threshold = 6)
[1] 0.005868045
> 
> distance_args <- list(
+   Time = Time,
+   alpha_norm = alpha_norm,
+   alpha_cauchy = alpha_cauchy,
+   obs = y,
+   var = var_mat,
+   threshold = 6,
+   registration = TRUE,
+   distance = "MMD",
+   method = "DP2",
+   mean_global = 0,
+   sigma_a = 2.5
+ )
> 
> distance_args$y_kmmd <- EasyMMD::kmmd(distance_args$obs, var = distance_args$var)
> 
> loss_sG(theta, distance_args)
[1] 0.004404219
> 
> # ABC -----------------
> 
> prior_sGaussian <- prior_unif(c(0, 0, 0), c(3, 2, 0.02), var_names = c("sigma[phi]", "rho[phi]", "sigma[epsilon]"), eval = FALSE)
> 
> prior_sGaussian_eval <- prior_unif(c(0, 0, 0), c(3, 2, 0.02), var_names = c("sigma[phi]", "rho[phi]", "sigma[epsilon]"), eval = TRUE)
> 
> cov_func <- function(x){
+   robust::covRob(x)$cov
+ }
> 
> abc_control <- list(
+   prior_eval = prior_sGaussian_eval,
+   n = n_runs,
+   pacc_final = pacc_final
+ )
> 
> #cl <- makeCluster(detectCores() - 1) #USER
> cl <- "mclapply" #HPC
> 
> ## sigma_a <- 5 -----------------
> 
> distance_args$sigma_a <- 2.5
> 
> ### Registration <- FALSE -------------
> 
> distance_args$registration <- FALSE
> 
> #### Distance <- "FR" -------------------
> 
> distance_args$distance <- "FR"
> 
> ABC_sG_RF_FR <- abc_start(prior_sGaussian, loss_sG, distance_args = distance_args, method = "RABC", control = abc_control, cl = cl) %>%
+   mutate(
+     registration = distance_args$registration,
+     distance     = distance_args$distance,
+     sigma_a      = distance_args$sigma_a
+   )
********************************
Acceptance prob of MCMC was 0.39405
Number of MCMC moves for next iteration is 10
Number of unique particles is 3938
dist_max is 3.96438057914777
dist_next is 3.67063726670168
********************************
Acceptance prob of MCMC was 0.28895
Number of MCMC moves for next iteration is 14
Number of unique particles is 3817
dist_max is 3.67063726670168
dist_next is 3.50494288873561
********************************
Acceptance prob of MCMC was 0.195357142857143
Number of MCMC moves for next iteration is 22
Number of unique particles is 3705
dist_max is 3.50494288873561
dist_next is 3.39188086276896
********************************
Acceptance prob of MCMC was 0.118363636363636
Number of MCMC moves for next iteration is 37
Number of unique particles is 3606
dist_max is 3.39188086276896
dist_next is 3.30872683777703
********************************
Acceptance prob of MCMC was 0.0724189189189189
Number of MCMC moves for next iteration is 62
Number of unique particles is 3596
dist_max is 3.30872683777703
dist_next is 3.23832009009636
********************************
Acceptance prob of MCMC was 0.0392096774193548
Number of MCMC moves for next iteration is 116
Number of unique particles is 3499
dist_max is 3.23832009009636
dist_next is 3.17945857399571
********************************
Acceptance prob of MCMC was 0.0206853448275862
Number of MCMC moves for next iteration is 221
Number of unique particles is 3433
dist_max is 3.17945857399571
dist_next is 3.12688120554617
********************************
Acceptance prob of MCMC was 0.0113393665158371
Number of MCMC moves for next iteration is 404
Number of unique particles is 3414
dist_max is 3.12688120554617
dist_next is 3.0784748156707
********************************
Acceptance prob of MCMC was 0.00588737623762376
Number of MCMC moves for next iteration is 780
Number of unique particles is 3332
dist_max is 3.0784748156707
dist_next is 3.03329961907993
> 
> save(ABC_sG_RF_FR, file = "ABC_sG_RF_FR.RData")
> 
> summary(ABC_sG_RF_FR)
   sigma[phi]          rho[phi]         sigma[epsilon]      registration   
 Min.   :0.001828   Min.   :0.0003462   Min.   :1.313e-06   Mode :logical  
 1st Qu.:1.726504   1st Qu.:1.3875017   1st Qu.:1.149e-03   FALSE:4000     
 Median :2.247510   Median :1.6508179   Median :2.508e-03                  
 Mean   :2.148646   Mean   :1.5728142   Mean   :3.157e-03                  
 3rd Qu.:2.642152   3rd Qu.:1.8423598   3rd Qu.:4.454e-03                  
 Max.   :2.999946   Max.   :1.9992820   Max.   :1.382e-02                  
   distance            sigma_a   
 Length:4000        Min.   :2.5  
 Class :character   1st Qu.:2.5  
 Mode  :character   Median :2.5  
                    Mean   :2.5  
                    3rd Qu.:2.5  
                    Max.   :2.5  
> 
> #### Distance <- "MMD" -------------------
> 
> distance_args$distance <- "MMD"
> 
> ABC_sG_RF_MD <- abc_start(prior_sGaussian, loss_sG, distance_args = distance_args, method = "RABC", control = abc_control, cl = cl) %>%
+   mutate(
+     registration = distance_args$registration,
+     distance     = distance_args$distance,
+     sigma_a      = distance_args$sigma_a
+   )
********************************
Acceptance prob of MCMC was 0.41145
Number of MCMC moves for next iteration is 9
Number of unique particles is 3954
dist_max is 0.00761837218546097
dist_next is 0.00648632448333013
********************************
Acceptance prob of MCMC was 0.3405
Number of MCMC moves for next iteration is 12
Number of unique particles is 3877
dist_max is 0.00648632448333013
dist_next is 0.00584508262262293
********************************
Acceptance prob of MCMC was 0.273083333333333
Number of MCMC moves for next iteration is 15
Number of unique particles is 3832
dist_max is 0.00584508262262293
dist_next is 0.00538556468424
********************************
Acceptance prob of MCMC was 0.198
Number of MCMC moves for next iteration is 21
Number of unique particles is 3782
dist_max is 0.00538556468424
dist_next is 0.00505734630520865
********************************
Acceptance prob of MCMC was 0.132119047619048
Number of MCMC moves for next iteration is 33
Number of unique particles is 3731
dist_max is 0.00505734630520865
dist_next is 0.00480304147018351
********************************
Acceptance prob of MCMC was 0.0848484848484849
Number of MCMC moves for next iteration is 52
Number of unique particles is 3717
dist_max is 0.00480304147018351
dist_next is 0.00459481601604469
********************************
Acceptance prob of MCMC was 0.0514903846153846
Number of MCMC moves for next iteration is 88
Number of unique particles is 3611
dist_max is 0.00459481601604469
dist_next is 0.00441422532469417
********************************
Acceptance prob of MCMC was 0.0303693181818182
Number of MCMC moves for next iteration is 150
Number of unique particles is 3575
dist_max is 0.00441422532469417
dist_next is 0.00424502321939669
